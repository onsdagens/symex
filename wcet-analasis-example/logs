Simple WCET analasis
[2m2024-01-10T23:37:00.459660Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Parsing elf file: /home/pawel/symex/symex/target/riscv32i-unknown-none-elf/release/examples/simple
[2m2024-01-10T23:37:00.462184Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project::dwarf_helper[0m[2m:[0m Constructing PC hooks
[2m2024-01-10T23:37:00.462366Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project::dwarf_helper[0m[2m:[0m found hook for ^symbolic_size<.+>$ att addr: 0x264, symbolic_size<core::mem::maybe_uninit::MaybeUninit<u32>>
[2m2024-01-10T23:37:00.462603Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project::dwarf_helper[0m[2m:[0m found hook for ^panic$ att addr: 0x388, panic
[2m2024-01-10T23:37:00.462742Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project::dwarf_helper[0m[2m:[0m found hook for ^suppress_path$ att addr: 0x3B0, suppress_path
[2m2024-01-10T23:37:00.462787Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project::dwarf_helper[0m[2m:[0m found hook for ^start_cyclecount$ att addr: 0x0, start_cyclecount
[2m2024-01-10T23:37:00.462828Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project::dwarf_helper[0m[2m:[0m found hook for ^end_cyclecount$ att addr: 0x0, end_cyclecount
[2m2024-01-10T23:37:00.464583Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project::dwarf_helper[0m[2m:[0m found hook for ^panic$ att addr: 0x448, panic
[2m2024-01-10T23:37:00.464639Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project::dwarf_helper[0m[2m:[0m found hook for ^panic_bounds_check$ att addr: 0x0, panic_bounds_check
(Regex("^panic_cold_explicit$"), EndFaliure("explicit panic"))
(Regex("^panic_bounds_check$"), EndFaliure("bounds check panic"))
(Regex("^suppress_path$"), Suppress)
(Regex("^unreachable_unchecked$"), EndFaliure("reach a unreachable unchecked call undefined behavior"))
(Regex("^start_cyclecount$"), Intrinsic(0x55a6dffa6d10))
(Regex("^end_cyclecount$"), Intrinsic(0x55a6dffa7020))
(Regex("^panic$"), EndFaliure("panic"))
(Regex("^symbolic_size<.+>$"), Intrinsic(0x55a6dffade20))
Did not find addresses for all hooks.
[2m2024-01-10T23:37:00.465463Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Created pc hooks: {1096: EndFaliure("panic"), 612: Intrinsic(0x55a6dffade20), 904: EndFaliure("panic"), 0: EndFaliure("bounds check panic"), 944: Suppress}
[2m2024-01-10T23:37:00.465623Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::run_elf[0m[2m:[0m Created project: Project { word_size: Bit32, endianness: Little, architecture: Riscv32 }
[2m2024-01-10T23:37:00.465641Z[0m [32m INFO[0m [1mmy_span[0m[2m:[0m [2msymex::run_elf[0m[2m:[0m create VM
[2m2024-01-10T23:37:00.465656Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Found function at addr: 0x29C.
[2m2024-01-10T23:37:00.465673Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Found stack start at addr: 0x50004000.
[2m2024-01-10T23:37:00.465773Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 0, for None
[2m2024-01-10T23:37:00.465787Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x0000029C
[2m2024-01-10T23:37:00.465804Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: ADDI { imm: -48, rs1: SP, rd: SP } }
ADDI -48
[2m2024-01-10T23:37:00.465829Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("SP"), operand1: Register("SP"), operand2: Immidiate(Word32(4294967248)) }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.465897Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("SP"), operand1: Register("SP"), operand2: Immidiate(Word32(4294967248)) }
[2m2024-01-10T23:37:00.465931Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register SP to BoolectorExpr(#x50003fd0)
[2m2024-01-10T23:37:00.466049Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("SP"), operand1: Register("SP"), operand2: Immidiate(Word32(4294967248)) }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.466071Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002A0
[2m2024-01-10T23:37:00.466086Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: SW { imm: 44, rs2: RA, rs1: SP } }
[2m2024-01-10T23:37:00.466102Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Move { destination: AddressWithOffset { address: Word32(44), offset_reg: "SP", width: 32 }, source: Register("RA") }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.466126Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: AddressWithOffset { address: Word32(44), offset_reg: "SP", width: 32 }, source: Register("RA") }
BoolectorExpr(#x0000002c)+BoolectorExpr(#x50003fd0)=BoolectorExpr(#x50003ffc) grephook set value: BoolectorExpr(#xfffffffe)
[2m2024-01-10T23:37:00.466362Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting memmory addr: BoolectorExpr(#x50003ffc)
[2m2024-01-10T23:37:00.466603Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Move { destination: AddressWithOffset { address: Word32(44), offset_reg: "SP", width: 32 }, source: Register("RA") }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.466626Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002A4
[2m2024-01-10T23:37:00.466640Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: SW { imm: 40, rs2: S0, rs1: SP } }
[2m2024-01-10T23:37:00.466657Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Move { destination: AddressWithOffset { address: Word32(40), offset_reg: "SP", width: 32 }, source: Register("S0") }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.466686Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: AddressWithOffset { address: Word32(40), offset_reg: "SP", width: 32 }, source: Register("S0") }
BoolectorExpr(#x00000028)+BoolectorExpr(#x50003fd0)=BoolectorExpr(#x50003ff8) grephook set value: BoolectorExpr((declare-fun BTOR_2@S0 () (_ BitVec 32))
)
[2m2024-01-10T23:37:00.466938Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting memmory addr: BoolectorExpr(#x50003ff8)
[2m2024-01-10T23:37:00.467191Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Move { destination: AddressWithOffset { address: Word32(40), offset_reg: "SP", width: 32 }, source: Register("S0") }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.467227Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002A8
[2m2024-01-10T23:37:00.467236Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: ADDI { imm: 0, rs1: A0, rd: S0 } }
ADDI 0
[2m2024-01-10T23:37:00.467252Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("S0"), operand1: Register("A0"), operand2: Immidiate(Word32(0)) }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.467282Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("S0"), operand1: Register("A0"), operand2: Immidiate(Word32(0)) }
[2m2024-01-10T23:37:00.467311Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register S0 to BoolectorExpr((declare-fun registers.A0 () (_ BitVec 32))
)
[2m2024-01-10T23:37:00.467399Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("S0"), operand1: Register("A0"), operand2: Immidiate(Word32(0)) }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.467422Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002AC
[2m2024-01-10T23:37:00.467438Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: SW { imm: 12, rs2: A0, rs1: SP } }
[2m2024-01-10T23:37:00.467452Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Move { destination: AddressWithOffset { address: Word32(12), offset_reg: "SP", width: 32 }, source: Register("A0") }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.467486Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: AddressWithOffset { address: Word32(12), offset_reg: "SP", width: 32 }, source: Register("A0") }
BoolectorExpr(#x0000000c)+BoolectorExpr(#x50003fd0)=BoolectorExpr(#x50003fdc) grephook set value: BoolectorExpr((declare-fun registers.A0 () (_ BitVec 32))
)
[2m2024-01-10T23:37:00.467726Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting memmory addr: BoolectorExpr(#x50003fdc)
[2m2024-01-10T23:37:00.467964Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Move { destination: AddressWithOffset { address: Word32(12), offset_reg: "SP", width: 32 }, source: Register("A0") }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.467987Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002B0
[2m2024-01-10T23:37:00.467999Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: SLTIU { imm: 2, rs1: A0, rd: A0 } }
[2m2024-01-10T23:37:00.468013Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Sub { destination: Register("temp"), operand1: Register("A0"), operand2: Immidiate(Word32(2)) }, SetZFlag(Register("temp")), SetCFlag { operand1: Register("A0"), operand2: Immidiate(Word32(2)), sub: true, carry: false }, Move { destination: Register("temp_N"), source: Flag("N") }, Move { destination: Register("temp_Z"), source: Flag("Z") }, Not { destination: Register("temp_N"), operand: Register("temp_N") }, Not { destination: Register("temp_Z"), operand: Register("temp_Z") }, And { destination: Register("A0"), operand1: Register("temp_N"), operand2: Register("temp_Z") }, ZeroExtend { destination: Register("A0"), operand: Register("A0"), bits: 32 }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.468073Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Sub { destination: Register("temp"), operand1: Register("A0"), operand2: Immidiate(Word32(2)) }
[2m2024-01-10T23:37:00.468095Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp to BoolectorExpr((bvadd #xfffffffe registers.A0))
[2m2024-01-10T23:37:00.468197Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: SetZFlag(Register("temp"))
[2m2024-01-10T23:37:00.468237Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m flag Z set to BoolectorExpr((= registers.A0 #x00000002))
[2m2024-01-10T23:37:00.468337Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: SetCFlag { operand1: Register("A0"), operand2: Immidiate(Word32(2)), sub: true, carry: false }
[2m2024-01-10T23:37:00.468401Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m flag C set to BoolectorExpr(((_ extract 32 32) (bvadd (concat #b0 registers.A0) #b011111111111111111111111111111110)))
[2m2024-01-10T23:37:00.468498Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: Register("temp_N"), source: Flag("N") }
[2m2024-01-10T23:37:00.468514Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp_N to BoolectorExpr((declare-fun flags.N () (_ BitVec 1))
)
[2m2024-01-10T23:37:00.468586Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: Register("temp_Z"), source: Flag("Z") }
[2m2024-01-10T23:37:00.468599Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp_Z to BoolectorExpr((= registers.A0 #x00000002))
[2m2024-01-10T23:37:00.468681Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Not { destination: Register("temp_N"), operand: Register("temp_N") }
[2m2024-01-10T23:37:00.468695Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp_N to BoolectorExpr((declare-fun flags.N () (_ BitVec 1))
)
[2m2024-01-10T23:37:00.468768Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Not { destination: Register("temp_Z"), operand: Register("temp_Z") }
[2m2024-01-10T23:37:00.468782Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp_Z to BoolectorExpr((not (= registers.A0 #x00000002)))
[2m2024-01-10T23:37:00.468860Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: And { destination: Register("A0"), operand1: Register("temp_N"), operand2: Register("temp_Z") }
[2m2024-01-10T23:37:00.468879Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register A0 to BoolectorExpr((bvand (bvnot flags.N) (bvnot (ite (= registers.A0 #x00000002) #b1 #b0))))
[2m2024-01-10T23:37:00.468967Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: ZeroExtend { destination: Register("A0"), operand: Register("A0"), bits: 32 }
[2m2024-01-10T23:37:00.469001Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register A0 to BoolectorExpr((bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))
[2m2024-01-10T23:37:00.469121Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Sub { destination: Register("temp"), operand1: Register("A0"), operand2: Immidiate(Word32(2)) }, SetZFlag(Register("temp")), SetCFlag { operand1: Register("A0"), operand2: Immidiate(Word32(2)), sub: true, carry: false }, Move { destination: Register("temp_N"), source: Flag("N") }, Move { destination: Register("temp_Z"), source: Flag("Z") }, Not { destination: Register("temp_N"), operand: Register("temp_N") }, Not { destination: Register("temp_Z"), operand: Register("temp_Z") }, And { destination: Register("A0"), operand1: Register("temp_N"), operand2: Register("temp_Z") }, ZeroExtend { destination: Register("A0"), operand: Register("A0"), bits: 32 }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.469157Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002B4
[2m2024-01-10T23:37:00.469171Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: XORI { imm: 1, rs1: A0, rd: A0 } }
[2m2024-01-10T23:37:00.469185Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Xor { destination: Register("A0"), operand1: Register("A0"), operand2: Immidiate(Word32(1)) }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.469211Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Xor { destination: Register("A0"), operand1: Register("A0"), operand2: Immidiate(Word32(1)) }
[2m2024-01-10T23:37:00.469234Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register A0 to BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1)))))
[2m2024-01-10T23:37:00.469358Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Xor { destination: Register("A0"), operand1: Register("A0"), operand2: Immidiate(Word32(1)) }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.469380Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002B8
[2m2024-01-10T23:37:00.469391Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: AUIPC { rd: RA, imm: 0 } }
[2m2024-01-10T23:37:00.469422Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("RA"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.469446Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("RA"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }
[2m2024-01-10T23:37:00.469464Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register RA to BoolectorExpr(#x000002bc)
[2m2024-01-10T23:37:00.469544Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("RA"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.469571Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002BC
[2m2024-01-10T23:37:00.469582Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: JALR { rd: RA, rs1: RA, imm: 212 } }
[2m2024-01-10T23:37:00.469602Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }, Add { destination: Register("temp2"), operand1: Register("RA"), operand2: Immidiate(Word32(212)) }, Sub { destination: Register("temp2"), operand1: Register("temp2"), operand2: Immidiate(Word32(4)) }, ConditionalJump { destination: Register("temp2"), condition: None }, Move { destination: Register("RA"), source: Register("temp") }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.469630Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }
[2m2024-01-10T23:37:00.469652Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp to BoolectorExpr(#x000002c0)
[2m2024-01-10T23:37:00.469731Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("temp2"), operand1: Register("RA"), operand2: Immidiate(Word32(212)) }
[2m2024-01-10T23:37:00.469751Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp2 to BoolectorExpr(#x00000390)
[2m2024-01-10T23:37:00.469825Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Sub { destination: Register("temp2"), operand1: Register("temp2"), operand2: Immidiate(Word32(4)) }
[2m2024-01-10T23:37:00.469846Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp2 to BoolectorExpr(#x0000038c)
[2m2024-01-10T23:37:00.469920Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: ConditionalJump { destination: Register("temp2"), condition: None }
[2m2024-01-10T23:37:00.469936Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m conditional expr: BoolectorExpr(true)
[2m2024-01-10T23:37:00.470016Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: Register("RA"), source: Register("temp") }
[2m2024-01-10T23:37:00.470034Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register RA to BoolectorExpr(#x000002c0)
[2m2024-01-10T23:37:00.470120Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }, Add { destination: Register("temp2"), operand1: Register("RA"), operand2: Immidiate(Word32(212)) }, Sub { destination: Register("temp2"), operand1: Register("temp2"), operand2: Immidiate(Word32(4)) }, ConditionalJump { destination: Register("temp2"), condition: None }, Move { destination: Register("RA"), source: Register("temp") }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.470145Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x0000038C
[2m2024-01-10T23:37:00.470175Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: ADDI { imm: -16, rs1: SP, rd: SP } }
ADDI -16
[2m2024-01-10T23:37:00.470198Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("SP"), operand1: Register("SP"), operand2: Immidiate(Word32(4294967280)) }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.470225Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("SP"), operand1: Register("SP"), operand2: Immidiate(Word32(4294967280)) }
[2m2024-01-10T23:37:00.470246Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register SP to BoolectorExpr(#x50003fc0)
[2m2024-01-10T23:37:00.470340Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("SP"), operand1: Register("SP"), operand2: Immidiate(Word32(4294967280)) }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.470360Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x00000390
[2m2024-01-10T23:37:00.470380Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: SB { imm: 15, rs2: A0, rs1: SP } }
[2m2024-01-10T23:37:00.470394Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Move { destination: AddressWithOffset { address: Word32(15), offset_reg: "SP", width: 8 }, source: Register("A0") }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.470417Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: AddressWithOffset { address: Word32(15), offset_reg: "SP", width: 8 }, source: Register("A0") }
BoolectorExpr(#x0000000f)+BoolectorExpr(#x50003fc0)=BoolectorExpr(#x50003fcf) grephook set value: BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1)))))
[2m2024-01-10T23:37:00.470760Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting memmory addr: BoolectorExpr(#x50003fcf)
[2m2024-01-10T23:37:00.471048Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Move { destination: AddressWithOffset { address: Word32(15), offset_reg: "SP", width: 8 }, source: Register("A0") }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.471075Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x00000394
[2m2024-01-10T23:37:00.471087Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: BEQ { imm: 16, rs1: A0, rs2: ZERO } }
[2m2024-01-10T23:37:00.471102Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Sub { destination: Register("temp"), operand1: Register("A0"), operand2: Register("ZERO") }, SetZFlag(Register("temp")), Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(16)) }, ConditionalJump { destination: Register("temp"), condition: EQ }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.471149Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Sub { destination: Register("temp"), operand1: Register("A0"), operand2: Register("ZERO") }
[2m2024-01-10T23:37:00.471170Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp to BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1)))))
[2m2024-01-10T23:37:00.471292Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: SetZFlag(Register("temp"))
[2m2024-01-10T23:37:00.471315Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m flag Z set to BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (= #x00000000 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))))
[2m2024-01-10T23:37:00.471442Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(16)) }
[2m2024-01-10T23:37:00.471465Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp to BoolectorExpr(#x000003a8)
[2m2024-01-10T23:37:00.471544Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: ConditionalJump { destination: Register("temp"), condition: EQ }
[2m2024-01-10T23:37:00.471559Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m conditional expr: BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (= #x00000000 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))))
[2m2024-01-10T23:37:00.475185Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m true possible: true false possible: true
[2m2024-01-10T23:37:00.475229Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Save backtracking path: constraint=BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (not (= #x00000000 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1)))))))
[2m2024-01-10T23:37:00.475424Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Sub { destination: Register("temp"), operand1: Register("A0"), operand2: Register("ZERO") }, SetZFlag(Register("temp")), Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(16)) }, ConditionalJump { destination: Register("temp"), condition: EQ }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.475451Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000003A8
[2m2024-01-10T23:37:00.475464Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: JALR { rd: RA, rs1: RA, imm: 12 } }
[2m2024-01-10T23:37:00.475478Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }, Add { destination: Register("temp2"), operand1: Register("RA"), operand2: Immidiate(Word32(12)) }, Sub { destination: Register("temp2"), operand1: Register("temp2"), operand2: Immidiate(Word32(4)) }, ConditionalJump { destination: Register("temp2"), condition: None }, Move { destination: Register("RA"), source: Register("temp") }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.475532Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }
[2m2024-01-10T23:37:00.475551Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp to BoolectorExpr(#x000003ac)
[2m2024-01-10T23:37:00.475637Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("temp2"), operand1: Register("RA"), operand2: Immidiate(Word32(12)) }
[2m2024-01-10T23:37:00.475658Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp2 to BoolectorExpr(#x000002cc)
[2m2024-01-10T23:37:00.475735Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Sub { destination: Register("temp2"), operand1: Register("temp2"), operand2: Immidiate(Word32(4)) }
[2m2024-01-10T23:37:00.475757Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp2 to BoolectorExpr(#x000002c8)
[2m2024-01-10T23:37:00.475831Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: ConditionalJump { destination: Register("temp2"), condition: None }
[2m2024-01-10T23:37:00.475846Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m conditional expr: BoolectorExpr(true)
[2m2024-01-10T23:37:00.475921Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: Register("RA"), source: Register("temp") }
[2m2024-01-10T23:37:00.475936Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register RA to BoolectorExpr(#x000003ac)
[2m2024-01-10T23:37:00.476007Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }, Add { destination: Register("temp2"), operand1: Register("RA"), operand2: Immidiate(Word32(12)) }, Sub { destination: Register("temp2"), operand1: Register("temp2"), operand2: Immidiate(Word32(4)) }, ConditionalJump { destination: Register("temp2"), condition: None }, Move { destination: Register("RA"), source: Register("temp") }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.476029Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002C8
[2m2024-01-10T23:37:00.476041Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: AUIPC { rd: RA, imm: 0 } }
[2m2024-01-10T23:37:00.476053Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("RA"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.476073Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("RA"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }
[2m2024-01-10T23:37:00.476088Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register RA to BoolectorExpr(#x000002cc)
[2m2024-01-10T23:37:00.476178Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("RA"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.476200Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002CC
[2m2024-01-10T23:37:00.476214Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: JALR { rd: RA, rs1: RA, imm: 4294967224 } }
[2m2024-01-10T23:37:00.476227Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }, Add { destination: Register("temp2"), operand1: Register("RA"), operand2: Immidiate(Word32(4294967224)) }, Sub { destination: Register("temp2"), operand1: Register("temp2"), operand2: Immidiate(Word32(4)) }, ConditionalJump { destination: Register("temp2"), condition: None }, Move { destination: Register("RA"), source: Register("temp") }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.476261Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }
[2m2024-01-10T23:37:00.476277Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp to BoolectorExpr(#x000002d0)
[2m2024-01-10T23:37:00.476355Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("temp2"), operand1: Register("RA"), operand2: Immidiate(Word32(4294967224)) }
[2m2024-01-10T23:37:00.476376Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp2 to BoolectorExpr(#x00000284)
[2m2024-01-10T23:37:00.476451Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Sub { destination: Register("temp2"), operand1: Register("temp2"), operand2: Immidiate(Word32(4)) }
[2m2024-01-10T23:37:00.476478Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp2 to BoolectorExpr(#x00000280)
[2m2024-01-10T23:37:00.476555Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: ConditionalJump { destination: Register("temp2"), condition: None }
[2m2024-01-10T23:37:00.476570Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m conditional expr: BoolectorExpr(true)
[2m2024-01-10T23:37:00.476647Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: Register("RA"), source: Register("temp") }
[2m2024-01-10T23:37:00.476663Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register RA to BoolectorExpr(#x000002d0)
[2m2024-01-10T23:37:00.476746Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }, Add { destination: Register("temp2"), operand1: Register("RA"), operand2: Immidiate(Word32(4294967224)) }, Sub { destination: Register("temp2"), operand1: Register("temp2"), operand2: Immidiate(Word32(4)) }, ConditionalJump { destination: Register("temp2"), condition: None }, Move { destination: Register("RA"), source: Register("temp") }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.476780Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x00000280
[2m2024-01-10T23:37:00.476791Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: ADDI { imm: -16, rs1: SP, rd: SP } }
ADDI -16
[2m2024-01-10T23:37:00.476818Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("SP"), operand1: Register("SP"), operand2: Immidiate(Word32(4294967280)) }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.476841Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("SP"), operand1: Register("SP"), operand2: Immidiate(Word32(4294967280)) }
[2m2024-01-10T23:37:00.476864Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register SP to BoolectorExpr(#x50003fb0)
[2m2024-01-10T23:37:00.476942Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("SP"), operand1: Register("SP"), operand2: Immidiate(Word32(4294967280)) }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.476960Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x00000284
[2m2024-01-10T23:37:00.476971Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: ADDI { imm: 4, rs1: ZERO, rd: A1 } }
ADDI 4
[2m2024-01-10T23:37:00.476988Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("A1"), operand1: Register("ZERO"), operand2: Immidiate(Word32(4)) }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.477010Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("A1"), operand1: Register("ZERO"), operand2: Immidiate(Word32(4)) }
[2m2024-01-10T23:37:00.477025Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register A1 to BoolectorExpr(#x00000004)
[2m2024-01-10T23:37:00.477099Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("A1"), operand1: Register("ZERO"), operand2: Immidiate(Word32(4)) }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.477114Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x00000288
[2m2024-01-10T23:37:00.477124Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: SW { imm: 12, rs2: A1, rs1: SP } }
[2m2024-01-10T23:37:00.477136Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Move { destination: AddressWithOffset { address: Word32(12), offset_reg: "SP", width: 32 }, source: Register("A1") }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.477248Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: AddressWithOffset { address: Word32(12), offset_reg: "SP", width: 32 }, source: Register("A1") }
BoolectorExpr(#x0000000c)+BoolectorExpr(#x50003fb0)=BoolectorExpr(#x50003fbc) grephook set value: BoolectorExpr(#x00000004)
[2m2024-01-10T23:37:00.477516Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting memmory addr: BoolectorExpr(#x50003fbc)
[2m2024-01-10T23:37:00.477747Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Move { destination: AddressWithOffset { address: Word32(12), offset_reg: "SP", width: 32 }, source: Register("A1") }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.477771Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x0000028C
[2m2024-01-10T23:37:00.477790Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: LW { imm: 12, rs1: SP, rd: A1 } }
[2m2024-01-10T23:37:00.477803Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Move { destination: Register("A1"), source: AddressWithOffset { address: Word32(12), offset_reg: "SP", width: 32 } }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.477829Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: Register("A1"), source: AddressWithOffset { address: Word32(12), offset_reg: "SP", width: 32 } }
[2m2024-01-10T23:37:00.477854Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Getting memmory addr: BoolectorExpr(#x50003fbc)
[2m2024-01-10T23:37:00.478024Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m[1mread[0m[1m{[0m[3maddr[0m[2m=[0mBoolectorExpr(#x50003fbc) [3mbits[0m[2m=[0m32[1m}[0m[2m:[0m [2msymex::memory::array_memory[0m[2m:[0m Read value: BoolectorExpr(#x00000004)
BoolectorExpr(#x0000000c)+BoolectorExpr(#x50003fb0)=BoolectorExpr(#x50003fbc) grephook get value: Ok(BoolectorExpr(#x00000004))
[2m2024-01-10T23:37:00.478315Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Getting memmory addr: BoolectorExpr(#x50003fbc)
[2m2024-01-10T23:37:00.478483Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m[1mread[0m[1m{[0m[3maddr[0m[2m=[0mBoolectorExpr(#x50003fbc) [3mbits[0m[2m=[0m32[1m}[0m[2m:[0m [2msymex::memory::array_memory[0m[2m:[0m Read value: BoolectorExpr(#x00000004)
[2m2024-01-10T23:37:00.478554Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register A1 to BoolectorExpr(#x00000004)
[2m2024-01-10T23:37:00.478633Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Move { destination: Register("A1"), source: AddressWithOffset { address: Word32(12), offset_reg: "SP", width: 32 } }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.478657Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x00000290
[2m2024-01-10T23:37:00.478681Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: ADDI { imm: 16, rs1: SP, rd: SP } }
ADDI 16
[2m2024-01-10T23:37:00.478702Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("SP"), operand1: Register("SP"), operand2: Immidiate(Word32(16)) }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.478737Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("SP"), operand1: Register("SP"), operand2: Immidiate(Word32(16)) }
[2m2024-01-10T23:37:00.478774Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register SP to BoolectorExpr(#x50003fc0)
[2m2024-01-10T23:37:00.478854Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("SP"), operand1: Register("SP"), operand2: Immidiate(Word32(16)) }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.478876Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x00000294
[2m2024-01-10T23:37:00.478890Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: AUIPC { rd: T1, imm: 0 } }
[2m2024-01-10T23:37:00.478910Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("T1"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.478934Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("T1"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }
[2m2024-01-10T23:37:00.478957Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register T1 to BoolectorExpr(#x00000298)
[2m2024-01-10T23:37:00.479040Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("T1"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.479063Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x00000298
[2m2024-01-10T23:37:00.479085Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: JALR { rd: ZERO, rs1: T1, imm: 4294967248 } }
[2m2024-01-10T23:37:00.479098Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }, Add { destination: Register("temp2"), operand1: Register("T1"), operand2: Immidiate(Word32(4294967248)) }, Sub { destination: Register("temp2"), operand1: Register("temp2"), operand2: Immidiate(Word32(4)) }, ConditionalJump { destination: Register("temp2"), condition: None }, Move { destination: Register("ZERO"), source: Register("temp") }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.479135Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }
[2m2024-01-10T23:37:00.479164Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp to BoolectorExpr(#x0000029c)
[2m2024-01-10T23:37:00.479248Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("temp2"), operand1: Register("T1"), operand2: Immidiate(Word32(4294967248)) }
[2m2024-01-10T23:37:00.479274Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp2 to BoolectorExpr(#x00000268)
[2m2024-01-10T23:37:00.479356Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Sub { destination: Register("temp2"), operand1: Register("temp2"), operand2: Immidiate(Word32(4)) }
[2m2024-01-10T23:37:00.479408Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp2 to BoolectorExpr(#x00000264)
[2m2024-01-10T23:37:00.479486Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: ConditionalJump { destination: Register("temp2"), condition: None }
[2m2024-01-10T23:37:00.479507Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m conditional expr: BoolectorExpr(true)
[2m2024-01-10T23:37:00.479592Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: Register("ZERO"), source: Register("temp") }
[2m2024-01-10T23:37:00.479611Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register ZERO to BoolectorExpr(#x0000029c)
[2m2024-01-10T23:37:00.479690Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }, Add { destination: Register("temp2"), operand1: Register("T1"), operand2: Immidiate(Word32(4294967248)) }, Sub { destination: Register("temp2"), operand1: Register("temp2"), operand2: Immidiate(Word32(4)) }, ConditionalJump { destination: Register("temp2"), condition: None }, Move { destination: Register("ZERO"), source: Register("temp") }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.479713Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::translators::riscv32i[0m[2m:[0m trying to create symbolic: addr: BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))), size: 32
[2m2024-01-10T23:37:00.480040Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 0, for None
[2m2024-01-10T23:37:00.480059Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002D0
[2m2024-01-10T23:37:00.480074Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: LW { imm: 12, rs1: SP, rd: A0 } }
[2m2024-01-10T23:37:00.480091Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Move { destination: Register("A0"), source: AddressWithOffset { address: Word32(12), offset_reg: "SP", width: 32 } }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.480120Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: Register("A0"), source: AddressWithOffset { address: Word32(12), offset_reg: "SP", width: 32 } }
[2m2024-01-10T23:37:00.480147Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Getting memmory addr: BoolectorExpr(#x50003fcc)
[2m2024-01-10T23:37:00.480706Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m[1mread[0m[1m{[0m[3maddr[0m[2m=[0mBoolectorExpr(#x50003fcc) [3mbits[0m[2m=[0m32[1m}[0m[2m:[0m [2msymex::memory::array_memory[0m[2m:[0m Read value: BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (concat (concat (concat (select $e3 #x50003fcf) (select $e3 #x50003fce)) (select $e3 #x50003fcd)) (select $e3 #x50003fcc))))))
BoolectorExpr(#x0000000c)+BoolectorExpr(#x50003fc0)=BoolectorExpr(#x50003fcc) grephook get value: Ok(BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (concat (concat (concat (select $e3 #x50003fcf) (select $e3 #x50003fce)) (select $e3 #x50003fcd)) (select $e3 #x50003fcc)))))))
[2m2024-01-10T23:37:00.481575Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Getting memmory addr: BoolectorExpr(#x50003fcc)
[2m2024-01-10T23:37:00.481758Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m[1mread[0m[1m{[0m[3maddr[0m[2m=[0mBoolectorExpr(#x50003fcc) [3mbits[0m[2m=[0m32[1m}[0m[2m:[0m [2msymex::memory::array_memory[0m[2m:[0m Read value: BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (concat (concat (concat (select $e3 #x50003fcf) (select $e3 #x50003fce)) (select $e3 #x50003fcd)) (select $e3 #x50003fcc))))))
[2m2024-01-10T23:37:00.482165Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register A0 to BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (concat (concat (concat (select $e3 #x50003fcf) (select $e3 #x50003fce)) (select $e3 #x50003fcd)) (select $e3 #x50003fcc))))))
[2m2024-01-10T23:37:00.482571Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Move { destination: Register("A0"), source: AddressWithOffset { address: Word32(12), offset_reg: "SP", width: 32 } }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.482596Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002D4
[2m2024-01-10T23:37:00.482613Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: ADDI { imm: -2, rs1: A0, rd: A0 } }
ADDI -2
[2m2024-01-10T23:37:00.482639Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("A0"), operand1: Register("A0"), operand2: Immidiate(Word32(4294967294)) }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.482664Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("A0"), operand1: Register("A0"), operand2: Immidiate(Word32(4294967294)) }
[2m2024-01-10T23:37:00.482688Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register A0 to BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (bvadd #xfffffffe (concat (concat (concat (select $e3 #x50003fcf) (select $e3 #x50003fce)) (select $e3 #x50003fcd)) (select $e3 #x50003fcc)))))))
[2m2024-01-10T23:37:00.483136Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("A0"), operand1: Register("A0"), operand2: Immidiate(Word32(4294967294)) }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.483169Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002D8
[2m2024-01-10T23:37:00.483187Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: SLTIU { imm: 1, rs1: A0, rd: A0 } }
[2m2024-01-10T23:37:00.483209Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Sub { destination: Register("temp"), operand1: Register("A0"), operand2: Immidiate(Word32(1)) }, SetZFlag(Register("temp")), SetCFlag { operand1: Register("A0"), operand2: Immidiate(Word32(1)), sub: true, carry: false }, Move { destination: Register("temp_N"), source: Flag("N") }, Move { destination: Register("temp_Z"), source: Flag("Z") }, Not { destination: Register("temp_N"), operand: Register("temp_N") }, Not { destination: Register("temp_Z"), operand: Register("temp_Z") }, And { destination: Register("A0"), operand1: Register("temp_N"), operand2: Register("temp_Z") }, ZeroExtend { destination: Register("A0"), operand: Register("A0"), bits: 32 }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.483247Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Sub { destination: Register("temp"), operand1: Register("A0"), operand2: Immidiate(Word32(1)) }
[2m2024-01-10T23:37:00.483289Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp to BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (bvadd #xfffffffd (concat (concat (concat (select $e3 #x50003fcf) (select $e3 #x50003fce)) (select $e3 #x50003fcd)) (select $e3 #x50003fcc)))))))
[2m2024-01-10T23:37:00.483715Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: SetZFlag(Register("temp"))
[2m2024-01-10T23:37:00.483771Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m flag Z set to BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (and (= #x00 (select $e3 #x50003fce)) (= #x00 (select $e3 #x50003fcf)) (= #x00 (select $e3 #x50003fcd)) (= (select $e3 #x50003fcc) #x03))))))
[2m2024-01-10T23:37:00.484067Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: SetCFlag { operand1: Register("A0"), operand2: Immidiate(Word32(1)), sub: true, carry: false }
[2m2024-01-10T23:37:00.484130Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m flag C set to BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) ((_ extract 32 32) (bvadd (concat #b0 (bvadd #xfffffffe (concat (concat (concat (select $e3 #x50003fcf) (select $e3 #x50003fce)) (select $e3 #x50003fcd)) (select $e3 #x50003fcc)))) #b011111111111111111111111111111111))))))
[2m2024-01-10T23:37:00.484399Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: Register("temp_N"), source: Flag("N") }
[2m2024-01-10T23:37:00.484415Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp_N to BoolectorExpr((declare-fun flags.N () (_ BitVec 1))
)
[2m2024-01-10T23:37:00.484492Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: Register("temp_Z"), source: Flag("Z") }
[2m2024-01-10T23:37:00.484505Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp_Z to BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (and (= #x00 (select $e3 #x50003fce)) (= #x00 (select $e3 #x50003fcf)) (= #x00 (select $e3 #x50003fcd)) (= (select $e3 #x50003fcc) #x03))))))
[2m2024-01-10T23:37:00.484764Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Not { destination: Register("temp_N"), operand: Register("temp_N") }
[2m2024-01-10T23:37:00.484776Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp_N to BoolectorExpr((declare-fun flags.N () (_ BitVec 1))
)
[2m2024-01-10T23:37:00.484856Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Not { destination: Register("temp_Z"), operand: Register("temp_Z") }
[2m2024-01-10T23:37:00.484879Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp_Z to BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (not (and (= #x00 (select $e3 #x50003fce)) (= #x00 (select $e3 #x50003fcf)) (= #x00 (select $e3 #x50003fcd)) (= (select $e3 #x50003fcc) #x03)))))))
[2m2024-01-10T23:37:00.485287Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: And { destination: Register("A0"), operand1: Register("temp_N"), operand2: Register("temp_Z") }
[2m2024-01-10T23:37:00.485310Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register A0 to BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (bvand (bvnot flags.N) (bvnot (ite (and (= #x00 (select $e3 #x50003fce)) (= #x00 (select $e3 #x50003fcf)) (= #x00 (select $e3 #x50003fcd)) (= (select $e3 #x50003fcc) #x03)) #b1 #b0)))))))
[2m2024-01-10T23:37:00.485749Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: ZeroExtend { destination: Register("A0"), operand: Register("A0"), bits: 32 }
[2m2024-01-10T23:37:00.485777Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register A0 to BoolectorExpr((let (($e1 (concat #b0000000000000000000000000000000 (bvnot flags.N)))) (let (($e2 (bvand $e1 (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e3 (bvand (bvnot (bvand #xfffffffe (bvnot $e2))) (bvnot (bvand #x00000001 $e2))))) (let (($e4 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e3)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e3 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e3) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e3) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e3) ((_ extract 31 24) BTOR_3@any1)))) (bvand $e1 (concat #b0000000000000000000000000000000 (bvnot (ite (and (= #x00 (select $e4 #x50003fce)) (= #x00 (select $e4 #x50003fcf)) (= #x00 (select $e4 #x50003fcd)) (= (select $e4 #x50003fcc) #x03)) #b1 #b0)))))))))
[2m2024-01-10T23:37:00.486228Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Sub { destination: Register("temp"), operand1: Register("A0"), operand2: Immidiate(Word32(1)) }, SetZFlag(Register("temp")), SetCFlag { operand1: Register("A0"), operand2: Immidiate(Word32(1)), sub: true, carry: false }, Move { destination: Register("temp_N"), source: Flag("N") }, Move { destination: Register("temp_Z"), source: Flag("Z") }, Not { destination: Register("temp_N"), operand: Register("temp_N") }, Not { destination: Register("temp_Z"), operand: Register("temp_Z") }, And { destination: Register("A0"), operand1: Register("temp_N"), operand2: Register("temp_Z") }, ZeroExtend { destination: Register("A0"), operand: Register("A0"), bits: 32 }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.486259Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002DC
[2m2024-01-10T23:37:00.486271Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: ADDI { imm: -1, rs1: A0, rd: A0 } }
ADDI -1
[2m2024-01-10T23:37:00.486289Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("A0"), operand1: Register("A0"), operand2: Immidiate(Word32(4294967295)) }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.486321Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("A0"), operand1: Register("A0"), operand2: Immidiate(Word32(4294967295)) }
[2m2024-01-10T23:37:00.486338Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register A0 to BoolectorExpr((let (($e1 (concat #b0000000000000000000000000000000 (bvnot flags.N)))) (let (($e2 (bvand $e1 (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e3 (bvand (bvnot (bvand #xfffffffe (bvnot $e2))) (bvnot (bvand #x00000001 $e2))))) (let (($e4 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e3)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e3 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e3) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e3) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e3) ((_ extract 31 24) BTOR_3@any1)))) (bvadd #xffffffff (bvand $e1 (concat #b0000000000000000000000000000000 (bvnot (ite (and (= #x00 (select $e4 #x50003fce)) (= #x00 (select $e4 #x50003fcf)) (= #x00 (select $e4 #x50003fcd)) (= (select $e4 #x50003fcc) #x03)) #b1 #b0))))))))))
[2m2024-01-10T23:37:00.486708Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("A0"), operand1: Register("A0"), operand2: Immidiate(Word32(4294967295)) }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.486735Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002E0
[2m2024-01-10T23:37:00.486758Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: ANDI { imm: 13, rs1: A0, rd: A0 } }
[2m2024-01-10T23:37:00.486778Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [And { destination: Register("A0"), operand1: Register("A0"), operand2: Immidiate(Word32(13)) }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.486809Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: And { destination: Register("A0"), operand1: Register("A0"), operand2: Immidiate(Word32(13)) }
[2m2024-01-10T23:37:00.486827Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register A0 to BoolectorExpr((let (($e1 (concat #b0000000000000000000000000000000 (bvnot flags.N)))) (let (($e2 (bvand $e1 (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e3 (bvand (bvnot (bvand #xfffffffe (bvnot $e2))) (bvnot (bvand #x00000001 $e2))))) (let (($e4 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e3)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e3 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e3) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e3) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e3) ((_ extract 31 24) BTOR_3@any1)))) (bvand (bvadd #xffffffff (bvand $e1 (concat #b0000000000000000000000000000000 (bvnot (ite (and (= #x00 (select $e4 #x50003fce)) (= #x00 (select $e4 #x50003fcf)) (= #x00 (select $e4 #x50003fcd)) (= (select $e4 #x50003fcc) #x03)) #b1 #b0))))) #x0000000d))))))
[2m2024-01-10T23:37:00.487590Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [And { destination: Register("A0"), operand1: Register("A0"), operand2: Immidiate(Word32(13)) }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.487621Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002E4
[2m2024-01-10T23:37:00.487638Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: LW { imm: 44, rs1: SP, rd: RA } }
[2m2024-01-10T23:37:00.487663Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Move { destination: Register("RA"), source: AddressWithOffset { address: Word32(44), offset_reg: "SP", width: 32 } }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.487709Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: Register("RA"), source: AddressWithOffset { address: Word32(44), offset_reg: "SP", width: 32 } }
[2m2024-01-10T23:37:00.487728Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Getting memmory addr: BoolectorExpr(#x50003fec)
[2m2024-01-10T23:37:00.488296Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m[1mread[0m[1m{[0m[3maddr[0m[2m=[0mBoolectorExpr(#x50003fec) [3mbits[0m[2m=[0m32[1m}[0m[2m:[0m [2msymex::memory::array_memory[0m[2m:[0m Read value: BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (concat (concat (concat (select $e3 #x50003fef) (select $e3 #x50003fee)) (select $e3 #x50003fed)) (select $e3 #x50003fec))))))
BoolectorExpr(#x0000002c)+BoolectorExpr(#x50003fc0)=BoolectorExpr(#x50003fec) grephook get value: Ok(BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (concat (concat (concat (select $e3 #x50003fef) (select $e3 #x50003fee)) (select $e3 #x50003fed)) (select $e3 #x50003fec)))))))
[2m2024-01-10T23:37:00.489265Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Getting memmory addr: BoolectorExpr(#x50003fec)
[2m2024-01-10T23:37:00.489477Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m[1mread[0m[1m{[0m[3maddr[0m[2m=[0mBoolectorExpr(#x50003fec) [3mbits[0m[2m=[0m32[1m}[0m[2m:[0m [2msymex::memory::array_memory[0m[2m:[0m Read value: BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (concat (concat (concat (select $e3 #x50003fef) (select $e3 #x50003fee)) (select $e3 #x50003fed)) (select $e3 #x50003fec))))))
[2m2024-01-10T23:37:00.489924Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register RA to BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (concat (concat (concat (select $e3 #x50003fef) (select $e3 #x50003fee)) (select $e3 #x50003fed)) (select $e3 #x50003fec))))))
[2m2024-01-10T23:37:00.490338Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Move { destination: Register("RA"), source: AddressWithOffset { address: Word32(44), offset_reg: "SP", width: 32 } }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.490366Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002E8
[2m2024-01-10T23:37:00.490400Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: LW { imm: 40, rs1: SP, rd: S0 } }
[2m2024-01-10T23:37:00.490417Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Move { destination: Register("S0"), source: AddressWithOffset { address: Word32(40), offset_reg: "SP", width: 32 } }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.490452Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Move { destination: Register("S0"), source: AddressWithOffset { address: Word32(40), offset_reg: "SP", width: 32 } }
[2m2024-01-10T23:37:00.490502Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Getting memmory addr: BoolectorExpr(#x50003fe8)
[2m2024-01-10T23:37:00.491047Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m[1mread[0m[1m{[0m[3maddr[0m[2m=[0mBoolectorExpr(#x50003fe8) [3mbits[0m[2m=[0m32[1m}[0m[2m:[0m [2msymex::memory::array_memory[0m[2m:[0m Read value: BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (concat (concat (concat (select $e3 #x50003feb) (select $e3 #x50003fea)) (select $e3 #x50003fe9)) (select $e3 #x50003fe8))))))
BoolectorExpr(#x00000028)+BoolectorExpr(#x50003fc0)=BoolectorExpr(#x50003fe8) grephook get value: Ok(BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (concat (concat (concat (select $e3 #x50003feb) (select $e3 #x50003fea)) (select $e3 #x50003fe9)) (select $e3 #x50003fe8)))))))
[2m2024-01-10T23:37:00.491850Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Getting memmory addr: BoolectorExpr(#x50003fe8)
[2m2024-01-10T23:37:00.492062Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m[1mread[0m[1m{[0m[3maddr[0m[2m=[0mBoolectorExpr(#x50003fe8) [3mbits[0m[2m=[0m32[1m}[0m[2m:[0m [2msymex::memory::array_memory[0m[2m:[0m Read value: BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (concat (concat (concat (select $e3 #x50003feb) (select $e3 #x50003fea)) (select $e3 #x50003fe9)) (select $e3 #x50003fe8))))))
[2m2024-01-10T23:37:00.492506Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register S0 to BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (concat (concat (concat (select $e3 #x50003feb) (select $e3 #x50003fea)) (select $e3 #x50003fe9)) (select $e3 #x50003fe8))))))
[2m2024-01-10T23:37:00.492935Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Move { destination: Register("S0"), source: AddressWithOffset { address: Word32(40), offset_reg: "SP", width: 32 } }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.492964Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002EC
[2m2024-01-10T23:37:00.492987Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: ADDI { imm: 48, rs1: SP, rd: SP } }
ADDI 48
[2m2024-01-10T23:37:00.493010Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("SP"), operand1: Register("SP"), operand2: Immidiate(Word32(48)) }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.493047Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("SP"), operand1: Register("SP"), operand2: Immidiate(Word32(48)) }
[2m2024-01-10T23:37:00.493092Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register SP to BoolectorExpr(#x50003ff0)
[2m2024-01-10T23:37:00.493195Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::state[0m[2m:[0m Incrementing cycles: 1, for Some(Instruction { instruction_size: 32, operations: [Add { destination: Register("SP"), operand1: Register("SP"), operand2: Immidiate(Word32(48)) }], max_cycle: Value(1) })
[2m2024-01-10T23:37:00.493216Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m Reading instruction from address: 0x000002F0
[2m2024-01-10T23:37:00.493233Z[0m [34mDEBUG[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::project[0m[2m:[0m instruction read: Instruction { width: Bit32, operation: JALR { rd: ZERO, rs1: RA, imm: 0 } }
[2m2024-01-10T23:37:00.493255Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m executing instruction: Instruction { instruction_size: 32, operations: [Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }, Add { destination: Register("temp2"), operand1: Register("RA"), operand2: Immidiate(Word32(0)) }, Sub { destination: Register("temp2"), operand1: Register("temp2"), operand2: Immidiate(Word32(4)) }, ConditionalJump { destination: Register("temp2"), condition: None }, Move { destination: Register("ZERO"), source: Register("temp") }], max_cycle: Value(1) }
[2m2024-01-10T23:37:00.493293Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("temp"), operand1: Register("PC"), operand2: Immidiate(Word32(0)) }
[2m2024-01-10T23:37:00.493317Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp to BoolectorExpr(#x000002f4)
[2m2024-01-10T23:37:00.493407Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Add { destination: Register("temp2"), operand1: Register("RA"), operand2: Immidiate(Word32(0)) }
[2m2024-01-10T23:37:00.493441Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp2 to BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (concat (concat (concat (select $e3 #x50003fef) (select $e3 #x50003fee)) (select $e3 #x50003fed)) (select $e3 #x50003fec))))))
[2m2024-01-10T23:37:00.493961Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: Sub { destination: Register("temp2"), operand1: Register("temp2"), operand2: Immidiate(Word32(4)) }
[2m2024-01-10T23:37:00.493994Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Setting register temp2 to BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (bvadd #xfffffffc (concat (concat (concat (select $e3 #x50003fef) (select $e3 #x50003fee)) (select $e3 #x50003fed)) (select $e3 #x50003fec)))))))
[2m2024-01-10T23:37:00.494360Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m Executing operation: ConditionalJump { destination: Register("temp2"), condition: None }
[2m2024-01-10T23:37:00.494386Z[0m [35mTRACE[0m [1mmy_span[0m[2m:[0m [2msymex::general_assembly::executor[0m[2m:[0m conditional expr: BoolectorExpr(true)
BoolectorExpr((let (($e1 (bvand (concat #b0000000000000000000000000000000 (bvnot flags.N)) (concat #b0000000000000000000000000000000 (bvnot (ite (= registers.A0 #x00000002) #b1 #b0)))))) (let (($e2 (bvand (bvnot (bvand #xfffffffe (bvnot $e1))) (bvnot (bvand #x00000001 $e1))))) (let (($e3 (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store memory #x50003ffc #xfe) #x50003ffd #xff) #x50003ffe #xff) #x50003fff #xff) #x50003ff8 ((_ extract 7 0) BTOR_2@S0)) #x50003ff9 ((_ extract 15 8) BTOR_2@S0)) #x50003ffa ((_ extract 23 16) BTOR_2@S0)) #x50003ffb ((_ extract 31 24) BTOR_2@S0)) #x50003fdc ((_ extract 7 0) registers.A0)) #x50003fdd ((_ extract 15 8) registers.A0)) #x50003fde ((_ extract 23 16) registers.A0)) #x50003fdf ((_ extract 31 24) registers.A0)) #x50003fcf ((_ extract 7 0) $e2)) #x50003fbc #x04) #x50003fbd #x00) #x50003fbe #x00) #x50003fbf #x00) $e2 ((_ extract 7 0) BTOR_3@any1)) (bvadd #x00000001 $e2) ((_ extract 15 8) BTOR_3@any1)) (bvadd #x00000002 $e2) ((_ extract 23 16) BTOR_3@any1)) (bvadd #x00000003 $e2) ((_ extract 31 24) BTOR_3@any1)))) (bvadd #xfffffffc (concat (concat (concat (select $e3 #x50003fef) (select $e3 #x50003fee)) (select $e3 #x50003fed)) (select $e3 #x50003fec)))))))
